#!/bin/bash

# Valid Script
ipsaya=$(curl -sS ipv4.icanhazip.com)
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")
data_ip="https://raw.githubusercontent.com/joytun21/scjoy/main/izin"
checking_sc() {
  useexp=$(wget -qO- $data_ip | grep $ipsaya | awk '{print $3}')
  if [[ $date_list < $useexp ]]; then
    echo -ne
  else
    echo -e "\033[1;93m────────────────────────────────────────────\033[0m"
    echo -e "\033[42m          404 NOT FOUND AUTOSCRIPT          \033[0m"
    echo -e "\033[1;93m────────────────────────────────────────────\033[0m"
    echo -e ""
    echo -e "            ${RED}PERMISSION DENIED !${NC}"
    echo -e "   \033[0;33mYour VPS${NC} $ipsaya \033[0;33mHas been Banned${NC}"
    echo -e "     \033[0;33mBuy access permissions for scripts${NC}"
    echo -e "             \033[0;33mContact Admin :${NC}"
    echo -e "      ${GREEN}WhatsApp${NC} wa.me/6283877140463"
    echo -e "\033[1;93m────────────────────────────────────────────\033[0m"
    sleep 5
    reboot
  fi
}
checking_sc

        # Color variables
        green="\e[38;5;87m"
        red="\e[38;5;196m"
        neutral="\e[0m"
        blue="\e[38;5;130m"
        orange="\e[38;5;99m"
        yellow="\e[38;5;226m"
        purple="\e[38;5;141m"
        bold_white="\e[1;37m"
        reset="\e[0m"
        pink="\e[38;5;205m"

        # Function to convert byte size to a readable format
        convert_size() {
            local -i bytes=$1
            if [[ $bytes -lt 1024 ]]; then
                echo "${bytes}B"
            elif [[ $bytes -lt 1048576 ]]; then
                echo "$(((bytes + 1023) / 1024))KB"
            elif [[ $bytes -lt 1073741824 ]]; then
                echo "$(((bytes + 1048575) / 1048576))MB"
            else
                echo "$(((bytes + 1073741823) / 1073741824))GB"
            fi
        }

        # Function to print rainbow text
        print_rainbow() {
            local text="$1"
            local length=${#text}
            local start_color=(0 5 0)
            local mid_color=(0 200 0)
            local end_color=(0 5 0)

            for ((i = 0; i < length; i++)); do
                local progress=$((i * 100 / (length - 1)))

                if [ $progress -lt 50 ]; then
                    local factor=$((progress * 2))
                    r=$(((start_color[0] * (100 - factor) + mid_color[0] * factor) / 100))
                    g=$(((start_color[1] * (100 - factor) + mid_color[1] * factor) / 100))
                    b=$(((start_color[2] * (100 - factor) + mid_color[2] * factor) / 100))
                else
                    local factor=$(((progress - 50) * 2))
                    r=$(((mid_color[0] * (100 - factor) + end_color[0] * factor) / 100))
                    g=$(((mid_color[1] * (100 - factor) + end_color[1] * factor) / 100))
                    b=$(((mid_color[2] * (100 - factor) + end_color[2] * factor) / 100))
                fi

                printf "\e[38;2;%d;%d;%dm%s" "$r" "$g" "$b" "${text:$i:1}"
            done
            echo -e "$reset" # Reset color at the end
        }

        function autokill_ssh() {
            local sts=$(grep -qE "^SHELL" /etc/cron.d/autokill && echo -e "\033[32m[ON]\033[0m" || echo -e "\033[31m[OFF]\033[0m")
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${green}         SSH OVPN AUTO KILL           ${orange}│${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${neutral} Autokill Status: $sts"
            echo -e "${orange}│${neutral} 1) AutoKill After 5 Minutes"
            echo -e "${orange}│${neutral} 2) AutoKill After 10 Minutes"
            echo -e "${orange}│${neutral} 3) AutoKill After 15 Minutes"
            echo -e "${orange}│${neutral} 4) Disable AutoKill/MultiLogin"
            echo -e "${orange}│${neutral} x) Exit"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"

            read -p "Choose an option [1-4 or x]: " pilihan
            case $pilihan in
            1)
                echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n*/5 * * * * root /usr/bin/autokill" >/etc/cron.d/autokill
                clear
                print_rainbow "────────────────────────────────────────"
                echo -e "${orange}│${neutral}"
                echo -e "${orange}│${neutral}      AutoKill: Every 5 Minutes"
                echo -e "${orange}│${neutral}"
                print_rainbow "────────────────────────────────────────"
                service cron restart >/dev/null 2>&1
                ;;
            2)
                echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n*/10 * * * * root /usr/bin/autokill" >/etc/cron.d/autokill
                clear
                print_rainbow "────────────────────────────────────────"
                echo -e "${orange}│${neutral}"
                echo -e "${orange}│${neutral}      AutoKill: Every 10 Minutes"
                echo -e "${orange}│${neutral}"
                print_rainbow "────────────────────────────────────────"
                service cron restart >/dev/null 2>&1
                ;;
            3)
                echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n*/15 * * * * root /usr/bin/autokill" >/etc/cron.d/autokill
                clear
                print_rainbow "────────────────────────────────────────"
                echo -e "${orange}│${neutral}"
                echo -e "${orange}│${neutral}      AutoKill: Every 15 Minutes"
                echo -e "${orange}│${neutral}"
                print_rainbow "────────────────────────────────────────"
                service cron restart >/dev/null 2>&1
                ;;
            4)
                if [ ! -f /etc/cron.d/autokill ]; then
                    clear
                    print_rainbow "────────────────────────────────────────"
                    echo -e "${orange}│${neutral}"
                    echo -e "${orange}│${neutral} AutoKill Already ${red}Disabled${neutral}"
                    echo -e "${orange}│${neutral}"
                    print_rainbow "────────────────────────────────────────"
                    return
                fi
                rm -f /etc/cron.d/autokill
                clear
                print_rainbow "────────────────────────────────────────"
                echo -e "${orange}│${neutral}"
                echo -e "${orange}│${neutral}      AutoKill ${red}Disabled${neutral}"
                echo -e "${orange}│${neutral}"
                print_rainbow "────────────────────────────────────────"
                service cron restart >/dev/null 2>&1
                return
                ;;
            x | X)
                clear
                return
                ;;
            *)
                echo "Invalid choice. Please try again."
                return
                ;;
            esac

        }

        # Function to lock SSH account
        function lock_ssh() {
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${green}        LOCK SSH OVPN Account         ${orange}│${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e "${orange}│${neutral}         No registered clients!       ${orange}│${neutral}"
                echo -e "${orange}└──────────────────────────────────────┘${neutral}"
                exit 0
            fi
            echo -e "${orange}│ ${green}NO  USERNAME         EXPIRY DATE"
            echo -e "${orange}│ ${neutral}----------------------------------"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf "%-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "${orange}│ ${neutral}$line"
            done
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            print_rainbow "─────────────────────────────────────────"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi

                # Add exception handling for non-numeric input
                if ! [[ ${CLIENT_NUMBER} =~ ^[0-9]+$ ]]; then
                    echo "Error: Please enter a valid number."
                    CLIENT_NUMBER=0
                fi
            done

            username=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            if ! grep -q "^$username:" /etc/passwd; then
                echo "Error: Username $username not found in the system."
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            if passwd -S "$username" | grep -q "L"; then
                echo "Account $username is already locked."
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            # Add exception for root and admin
            if [[ "$username" == "root" || "$username" == "admin" ]]; then
                echo "Error: Cannot lock $username account as it is a critical system account."
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            if passwd -l "$username"; then
                clear
                print_rainbow "─────────────────────────────────────────"
                echo -e "${green}Username $username successfully LOCKED!${reset}"
                echo -e "${yellow}Login access for username $username${reset}"
                echo -e "${yellow}has been locked.${reset}"
                print_rainbow "─────────────────────────────────────────"

                # Add locking log
                echo "$(date): Account $username locked" >>/var/log/ssh_account_actions.log

                read -n 1 -s -r -p "Press any key to return to menu"
            else
                echo "Failed to lock account $username."
                read -n 1 -s -r -p "Press any key to return to menu"
            fi
        }

        # Function to unlock SSH account
        function unlock_ssh() {
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${green}        UNLOCK SSH OVPN ACOUNT        ${orange}│${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e "${orange}│${neutral}         No registered clients!       ${orange}│${neutral}"
                echo -e "${orange}└──────────────────────────────────────┘${neutral}"
                exit 0
            fi
            echo -e "${orange}│ ${green}NO  USERNAME         EXPIRY DATE"
            echo -e "${orange}│ ${neutral}----------------------------------"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf "%-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "${orange}│ ${neutral}$line"
            done
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            print_rainbow "─────────────────────────────────────────"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi

                # Add exception handling for non-numeric input
                if ! [[ ${CLIENT_NUMBER} =~ ^[0-9]+$ ]]; then
                    echo "Error: Please enter a valid number."
                    CLIENT_NUMBER=0
                fi
            done

            username=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            if ! grep -q "^$username:" /etc/passwd; then
                echo "Error: Username $username not found in the system."
                read -n 1 -s -r -p "Press any key to return to the menu"
                return
            fi

            if ! passwd -S "$username" | grep -q "L"; then
                echo "Account $username is already unlocked."
                read -n 1 -s -r -p "Press any key to return to the menu"
                return
            fi

            if passwd -u "$username"; then
                clear
                print_rainbow "─────────────────────────────────────────"
                echo -e "${green}Username ${blue}$username${green} successfully UNLOCKED! ${reset}"
                echo -e "${green}Access for Username ${blue}$username${green}"
                echo -e "${green}has been restored.${reset}"
                print_rainbow "─────────────────────────────────────────"
            else
                echo "Failed to unlock account $username. Please try again."
            fi
            print_rainbow "─────────────────────────────────────────"
            read -n 1 -s -r -p "Press any key to return to the menu"
        }
        # Function to display SSH account details
        function detail_ssh() {
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│       ${green}SSH OVPN ACCOUNT DETAILS${neutral}       ${orange}│${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e "${orange}│${neutral}         No registered clients!       ${orange}│${neutral}"
                echo -e "${orange}└──────────────────────────────────────┘${neutral}"
                exit 0
            fi
            echo -e "${orange}│ ${green}NO  USERNAME         EXPIRY DATE"
            echo -e "${orange}│ ${neutral}----------------------------------"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf "%-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "${orange}│ ${neutral}$line"
            done
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            print_rainbow "─────────────────────────────────────────"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi

                # Add exception handling for non-numeric input
                if ! [[ ${CLIENT_NUMBER} =~ ^[0-9]+$ ]]; then
                    echo "Error: Please enter a valid number."
                    CLIENT_NUMBER=0
                fi
            done

            username=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            clear
            # Add exception handling for missing log file
            if [ -f "/etc/xray/log-createssh-${username}.log" ]; then
                cat "/etc/xray/log-createssh-${username}.log"
            else
                echo "  Log file not found for this user."
            fi

            print_rainbow "───────────────────────────"
            read -n 1 -s -r -p "Press any key to return to the menu"
        }

        # Function to change SSH account limit
        function changelimit() {
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│    ${green}CHANGE SSH OVPN ACCOUNT LIMIT${neutral}     ${orange}│${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/ssh/.ssh.db")
            if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
                echo -e "${orange}│${neutral}         No registered clients!       ${orange}│${neutral}"
                echo -e "${orange}└──────────────────────────────────────┘${neutral}"
                exit 0
            fi
            echo -e "${orange}│ ${green}NO  USERNAME         EXP DATE"
            echo -e "${orange}│ ${neutral} ----------------------------------"
            grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2-3 | awk '{printf "%-3s %-15s %s\n", NR")", $1, $2}' | while read line; do
                echo -e "${orange}│ ${neutral}$line"
            done
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            print_rainbow "─────────────────────────────────────────"

            until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
                if [[ ${NUMBER_OF_CLIENTS} == '1' ]]; then
                    read -rp "Select client number [1]: " CLIENT_NUMBER
                else
                    read -rp "Select client number [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
                fi
            done

            user=$(grep -E "^### " "/etc/ssh/.ssh.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)

            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│ ${green}       ENTER LIMIT FOR ACCOUNT       ${orange}│${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            print_rainbow "─────────────────────────────────────────"
            echo -e "  USERNAME : ${user}"
            while true; do
                read -p "  IP LIMIT (MINIMUM 1): " iplim
                if [[ $iplim == "x" ]]; then
                    echo "Cancelled."
                    return
                elif [[ $iplim =~ ^[1-9][0-9]*$ ]]; then
                    break
                else
                    echo -e "${red}Error: Enter a positive number greater than 0 or 'x' to cancel.${neutral}"
                fi
            done
            echo "${iplim}" >/etc/ssh/${user}
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│   ${green}ACCOUNT LIMIT CHANGE SUCCESSFUL    ${orange}│${neutral}"
            echo -e "${orange}├──────────────────────────────────────┤${neutral}"
            echo -e "${orange}│ ${neutral}Username: ${green}$user${neutral}"
            echo -e "${orange}│ ${neutral}IP Limit: ${green}$iplim${neutral} devices"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo ""
            read -n 1 -s -r -p "Press any key to return to menu"
        }

        # Function to display SSH members
        function member_ssh() {
            clear
            echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${green}      SSH OVPN ACCOUNT DETAILS        ${orange}│${neutral}"
            echo -e "${orange}├──────────────────────────────────────┤${neutral}"

            if [ ! -f "/etc/ssh/.ssh.db" ]; then
                echo -e "${orange}│${neutral} Database file not found           ${orange}│${neutral}"
                echo -e "${orange}└──────────────────────────────────────┘${neutral}"
                echo -e ""
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            data=$(grep '^###' "/etc/ssh/.ssh.db" | cut -d ' ' -f 2,3)
            now=$(date +"%Y-%m-%d")

            if [ -z "$data" ]; then
                echo -e "${orange}│${neutral} No SSH accounts registered       ${orange}│${neutral}"
                echo -e "${orange}└──────────────────────────────────────┘${neutral}"
                echo -e ""
                read -n 1 -s -r -p "Press any key to return to menu"
                return
            fi

            while IFS= read -r line; do
                user=$(echo $line | cut -d ' ' -f 1)
                exp=$(echo $line | cut -d ' ' -f 2)

                if [ -z "$exp" ]; then
                    echo -e "${orange}│${neutral} Error: Expiration date not found for $user"
                    continue
                fi

                d1=$(date -d "$exp" +%s)
                d2=$(date -d "$now" +%s)
                dayleft=$((($d1 - $d2) / 86400))

                status="$(passwd -S $user 2>/dev/null | awk '{print $2}')"
                if [ $? -ne 0 ]; then
                    echo -e "${orange}│${neutral} Error: Failed to get status for $user"
                    continue
                fi

                iplimit=$(cat /etc/ssh/${user} 2>/dev/null || echo "Unlimited")

                if [[ "$status" = "L" ]]; then
                    wf="${red}Locked ${neutral}"
                else
                    wf="${green}Active ${neutral}"
                fi

                echo -e "${orange}│${neutral} USERNAME : $user"
                echo -e "${orange}│${neutral} STATUS   : $wf"
                echo -e "${orange}│${neutral} IP LIMIT : $iplimit"
                echo -e "${orange}│${neutral} DAYS LEFT: $dayleft DAYS"
                echo -e "${orange}│${neutral} EXPIRES  : $exp"
                echo -e "${orange}├──────────────────────────────────────┤${neutral}"
            done <<<"$data"

            total=$(echo "$data" | wc -l)
            echo -e "${orange}│${neutral} Total Accounts: ${green}$total${neutral}"
            echo -e "${orange}└──────────────────────────────────────┘${neutral}"
            echo -e ""
            read -n 1 -s -r -p "Press any key to return to menu"
        }

        # Function to display SSH menu
        display_ssh_menu() {
            clear
            echo -e "${orange}┌────────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${neutral}  ${bold}${green}       MENU SSH/OVPN MANAGER ${neutral}         ${orange}│"
            echo -e "${orange}└────────────────────────────────────────┘${neutral}"
            echo -e "${orange}┌────────────────────────────────────────┐${neutral}"
            echo -e "${orange}│${neutral}  ${green} [1]${neutral} Create SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green} [2]${neutral} Delete SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green} [3]${neutral} Renew SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green} [4]${neutral} Check SSH OVPN Account Login"
            echo -e "${orange}│${neutral}  ${green} [5]${neutral} List SSH OVPN Members"
            echo -e "${orange}│${neutral}  ${green} [6]${neutral} Change SSH OVPN Account Limit"
            echo -e "${orange}│${neutral}  ${green} [7]${neutral} Lock SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green} [8]${neutral} Unlock SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green} [9]${neutral} SSH OVPN Account Details"
            echo -e "${orange}│${neutral}  ${green}[10]${neutral} Autokill SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green}[11]${neutral} Create Trial SSH OVPN Account"
            echo -e "${orange}│${neutral}  ${green} [x]${neutral} Exit SSH Manager"
            echo -e "${orange}└────────────────────────────────────────┘${neutral}"            
            echo -e ""
            read -p "Pick a number (11) or hit 'x' to bail: " ssh_choice

            case $ssh_choice in
            1) addssh ;;
            2) dellssh ;;
            3) renewssh ;;
            4) checkssh ;;
            5) member_ssh ;;
            6) changelimit ;;
            7) lock_ssh ;;
            8) unlock_ssh ;;
            9) detail_ssh ;;
            10) autokill_ssh ;;
            11) trialssh ;;
            x | X)
                echo -e ""
                echo -e "   ${green}Thank you for using our services.${neutral}"
                exit 0
                ;;
            *)
                echo -e "   ${red}Invalid option. Please try again.${neutral}"
                sleep 2
                display_ssh_menu
                ;;
            esac
        }
        # Call function to display menu
        display_ssh_menu
    