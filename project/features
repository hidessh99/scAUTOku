#!/bin/bash

# Valid Script
ipsaya=$(curl -sS ipv4.icanhazip.com)
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")

green="\e[38;5;87m"
        red="\e[38;5;196m"
        neutral="\e[0m"
        blue="\e[38;5;130m"
        orange="\e[38;5;99m"
        yellow="\e[38;5;226m"
        purple="\e[38;5;141m"
        bold_white="\e[1;37m"
        reset="\e[0m"
        pink="\e[38;5;205m"
print_rainbow() {
local text="$1"
local length=${#text}
local start_color=(0 5 0)
local mid_color=(0 200 0)
local end_color=(0 5 0)
for ((i = 0; i < length; i++)); do
local progress=$((i * 100 / (length - 1)))
if [ $progress -lt 50 ]; then
local factor=$((progress * 2))
r=$(( (start_color[0] * (100 - factor) + mid_color[0] * factor) / 100 ))
g=$(( (start_color[1] * (100 - factor) + mid_color[1] * factor) / 100 ))
b=$(( (start_color[2] * (100 - factor) + mid_color[2] * factor) / 100 ))
else
local factor=$(((progress - 50) * 2))
r=$(( (mid_color[0] * (100 - factor) + end_color[0] * factor) / 100 ))
g=$(( (mid_color[1] * (100 - factor) + end_color[1] * factor) / 100 ))
b=$(( (mid_color[2] * (100 - factor) + end_color[2] * factor) / 100 ))
fi
printf "\e[38;2;%d;%d;%dm%s" "$r" "$g" "$b" "${text:$i:1}"
done
echo -e "$reset" # Reset color at the end
}
fun_bar() {
CMD[0]="$1"
CMD[1]="$2"
(
[[ -e $HOME/fim ]] && rm $HOME/fim
${CMD[0]} -y >/dev/null 2>&1
${CMD[1]} -y >/dev/null 2>&1
touch $HOME/fim
) >/dev/null 2>&1 &
tput civis
echo -ne "  ${orange}Please wait while loading ${neutral}- ${orange}["
while true; do
for ((i = 0; i < 18; i++)); do
echo -ne "${green}#"
sleep 0.1s
done
[[ -e $HOME/fim ]] && rm $HOME/fim && break
echo -e "${orange}]"
sleep 1s
tput cuu1
tput dl1
echo -ne "  ${orange}Please wait while loading ${neutral}- ${orange}["
done
echo -e "${orange}]${neutral} -${green} OK !${neutral}"
tput cnorm
}
restart_services() {
services=(
"ssh" "dropbear" "ws" "openvpn" "nginx" "haproxy"
"xray@vmess" "xray@vless" "xray@trojan" "xray@shadowsocks"
)
for service in "${services[@]}"; do
echo -e "\033[0;33mRestarting service: \033[0;32m$service\033[0m"
fun_bar "systemctl restart $service"
done
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "   ${green}       RESTART SERVER SERVICES ${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e ""
}
check_bw() {
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e " ${green}       VNSTAT BANDWIDTH STATISTICS   ${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
if ! command -v vnstat &>/dev/null; then
echo -e "${red}Error: vnstat is not installed.${neutral}"
echo -e "Please install vnstat first."
read -n 1 -s -r -p "Press any key to return to the main menu"
return
fi
if [ -z "$(vnstat --iflist)" ]; then
echo -e "${red}Error: No network interfaces available for vnstat.${neutral}"
read -n 1 -s -r -p "Press any key to return to the main menu"
return
fi
vnstat
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "     ${green}1.${neutral} Show bandwidth details"
echo -e "     ${green}2.${neutral} Return to main menu"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e ""
read -p " Select an option (1-2): " choice
case $choice in
1)
echo -e "\nSelect period:"
echo -e "     ${green}1.${neutral} Today"
echo -e "     ${green}2.${neutral} Yesterday"
echo -e "     ${green}3.${neutral} This month"
echo -e "     ${green}4.${neutral} This year"
read -p " Select period (1-4): " period
case $period in
1) vnstat -d ;;
2) vnstat -d 1 ;;
3) vnstat -m ;;
4) vnstat -y ;;
*) echo -e "   ${red}Invalid choice${neutral}" ;;
esac
;;
2) return ;;
*) echo -e "   ${red}Invalid choice${neutral}" ;;
esac
read -n 1 -s -r -p "Press any key to continue"
check_bw
}
info_port() {
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${green}         PORT INFORMATION   ${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "  ${green}• SSH                : ${neutral}22, 443, 80"
echo -e "  ${green}• Dropbear           : ${neutral}443, 109, 143"
echo -e "  ${green}• SSH Websocket      : ${neutral}80, 443"
echo -e "  ${green}• OpenVPN            : ${neutral}443, 1194, 2200"
echo -e "  ${green}• Nginx              : ${neutral}80, 81, 443"
echo -e "  ${green}• Haproxy            : ${neutral}80, 443"
echo -e "  ${green}• DNS                : ${neutral}53, 443"
echo -e "  ${green}• XRAY Vmess         : ${neutral}80, 443"
echo -e "  ${green}• XRAY Vless         : ${neutral}80, 443"
echo -e "  ${green}• Trojan             : ${neutral}443"
echo -e "  ${green}• Shadowsocks        : ${neutral}443"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "  ${yellow}• Time Zone          : ${neutral}Asia/Jakarta (GMT +7)"
if [[ -f /etc/cron.d/daily_reboot ]]; then
reboot_time=$(grep -oP '^\d+\s+\d+' /etc/cron.d/daily_reboot | head -1 | awk '{printf "%02d:%02d", $2, $1}')
echo -e "  ${yellow}• Automatic Restart  : ${neutral}${reboot_time} GMT +7"
else
echo -e "  ${yellow}• Automatic Restart  : ${neutral}Not Set"
fi
echo -e "  ${yellow}• Auto Delete Expired: ${neutral}Yes"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e ""
read -n 1 -s -r -p "Press any key to return to the menu"
}
change_domain() {
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${green}            CHANGE VPS DOMAIN        ${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e ""
read -p "  Enter New Domain: " new_domain
if [ -z "$new_domain" ]; then
echo -e "  ${red}Error: Domain cannot be empty${neutral}"
read -n 1 -s -r -p "Press any key to return"
return 1
fi
current_domain=$(cat /etc/xray/domain)
if [ "$new_domain" = "$current_domain" ]; then
echo -e "\n  ${yellow}The entered domain is the same as the current domain.${neutral}"
read -p "  Do you want to renew the certificate? (y/n): " renew_cert
if [[ $renew_cert =~ ^[Yy]$ ]]; then
echo -e "\n  ${green}Processing certificate renewal...${neutral}"
else
echo -e "\n  ${green}No changes were made.${neutral}"
read -n 1 -s -r -p "Press any key to return to the menu"
return 0
fi
else
echo -e "\n  ${green}Processing domain change...${neutral}"
echo -e ""
fi
show_loading() {
local pid=$1
local message=$2
local delay=0.1
local spinstr='|/-\'
while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
local temp=${spinstr#?}
printf " %s [%c]  " "$message" "$spinstr"
local spinstr=$temp${spinstr%"$temp"}
sleep $delay
printf "\r"
done
printf "    \n"
}
{
systemctl stop nginx >/dev/null 2>&1
systemctl stop haproxy >/dev/null 2>&1
server_ip=$(curl -s ipv4.icanhazip.com)
domain_ip=$(getent ahosts $new_domain | awk '{print $1}' | head -n 1)
if [ "$server_ip" != "$domain_ip" ]; then
echo -e ""
systemctl start nginx >/dev/null 2>&1
systemctl start haproxy >/dev/null 2>&1
return 1
fi
if [ $? -ne 0 ]; then
systemctl start nginx >/dev/null 2>&1
systemctl start haproxy >/dev/null 2>&1
return 1
fi
if [ -f /etc/xray/domain ]; then
rm -rf /etc/xray/domain >/dev/null 2>&1
fi
echo $new_domain > /etc/xray/domain
if [ $? -ne 0 ]; then
echo -e "\n${red}Failed to write new domain ${neutral}"
systemctl start nginx >/dev/null 2>&1
systemctl start haproxy >/dev/null 2>&1
return 1
fi
/root/.acme.sh/acme.sh --upgrade --auto-upgrade >/dev/null 2>&1
/root/.acme.sh/acme.sh --set-default-ca --server letsencrypt >/dev/null 2>&1
/root/.acme.sh/acme.sh --issue -d $new_domain --standalone -k ec-256 >/dev/null 2>&1
/root/.acme.sh/acme.sh --installcert -d $new_domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc >/dev/null 2>&1
cat /etc/xray/xray.crt /etc/xray/xray.key | tee /etc/haproxy/yha.pem >/dev/null 2>&1
chown www-data:www-data /etc/xray/xray.key >/dev/null 2>&1
chown www-data:www-data /etc/xray/xray.crt >/dev/null 2>&1
systemctl restart haproxy >/dev/null 2>&1
systemctl restart nginx >/dev/null 2>&1
} &
show_loading $! "  Processing domain change"
wait $!
process_status=$?
if [ $process_status -eq 0 ]; then
if [ "$new_domain" = "$current_domain" ]; then
echo -e "\n  ${green}Success: Certificate renewed - $new_domain${neutral}"
else
echo -e "\n  ${green}Success: Domain changed to $new_domain${neutral}"
fi
echo -e "  ${yellow}Restart VPS to apply changes${neutral}"
else
echo -e "\n${red}Failed to change domain/renew certificate${neutral}"
fi
echo -e "${orange}─────────────────────────────────────────${neutral}"
read -n 1 -s -r -p "Press any key to return to the menu"
}

running() {
check_status() {
status=$(systemctl is-active --quiet $1 && echo "active" || echo "inactive")
if [ "$status" = "active" ]; then
echo -e "${green}GOOD${neutral}"
else
echo -e "${red}BAD${neutral}"
fi
}
services=(
"ssh" "dropbear" "ws" "openvpn" "nginx" "haproxy"
)
for s in "${services[@]}"; do
declare "$s"="$(check_status $s)"
done
print_info() {
printf "   ${yellow}%-19s${neutral} : %-25s\n" "$1" "$2"
}
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${green}           SYSTEM INFORMATION         ${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
service_info=(
"OpenSSH" "${ssh}"
"Dropbear" "${dropbear}"
"SSH Websocket" "${ws}"
"OpenVPN" "${openvpn}"
"Nginx" "${nginx}"
"Haproxy" "${haproxy}"
"Xray vmess" "$(check_status vmess@config)"
"Xray vless" "$(check_status vless@config)"
"Xray trojan" "$(check_status trojan@config)"
"Xray SSocks" "$(check_status shadowsocks@config)"
)
for ((i = 0; i < ${#service_info[@]}; i += 2)); do
print_info "${service_info[i]}" "${service_info[i + 1]}"
done
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo ""
}
auto_backup() {
local status=$(grep -qE "^SHELL" /etc/cron.d/backup && echo -e "\033[32m[ON]\033[0m" || echo -e "\033[31m[OFF]\033[0m")
clear
echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
echo -e "${orange}│${green}         AUTO BACKUP SETTINGS         ${orange}│${neutral}"
echo -e "${orange}└──────────────────────────────────────┘${neutral}"
echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
echo -e "${orange}│${neutral} AutoBackup Status: $status"
echo -e "${orange}│${neutral} 1) Every 1 Hours"
echo -e "${orange}│${neutral} 2) Every 1 Day"
echo -e "${orange}│${neutral} 3) Every 1 Week"
echo -e "${orange}│${neutral} 4) Every 1 Month"
echo -e "${orange}│${neutral} 5) Disable AutoBackup"
echo -e "${orange}│${neutral} x) Exit"
echo -e "${orange}└──────────────────────────────────────┘${neutral}"
read -p "Choose an option [1-5 or x]: " pilihan
case $pilihan in
1) echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n0 */1 * * * root /usr/bin/backuprestore backup" > /etc/cron.d/backup
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral}      AutoBackup: Every 1 Hours"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
service cron restart > /dev/null 2>&1
;;
2) echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n0 0 * * * root /usr/bin/backuprestore backup" > /etc/cron.d/backup
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral}      AutoBackup: Every 1 Day"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
service cron restart > /dev/null 2>&1
;;
3) echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n0 0 * * 7 root /usr/bin/backuprestore backup" > /etc/cron.d/backup
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral}      AutoBackup: Every 1 Week"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
service cron restart > /dev/null 2>&1
;;
4) echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n0 0 1 * * root /usr/bin/backuprestore backup" > /etc/cron.d/backup
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral}      AutoBackup: Every 1 Month"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
service cron restart > /dev/null 2>&1
;;
5)
if [ ! -f /etc/cron.d/backup ]; then
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral} AutoBackup Already ${red}Disabled${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
return
fi
rm -f /etc/cron.d/backup
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral}      AutoBackup ${red}Disabled${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
service cron restart > /dev/null 2>&1
return
;;
x|X) clear; return ;;
*) echo "Invalid choice. Please try again."; return ;;
esac
}

dropbear_update() {
clear
echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
echo -e "${orange}│${green}        UPDATE VERSI DROPBEAR         ${orange}│${neutral}"
echo -e "${orange}└──────────────────────────────────────┘${neutral}"
echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
echo -e "${orange}│${neutral} 1) Dropbear (2017)"
echo -e "${orange}│${neutral} 2) Dropbear (2019)"
echo -e "${orange}│${neutral} 3) Dropbear (2022)"
echo -e "${orange}│${neutral} 4) Dropbear (2024)"
echo -e "${orange}│${neutral} 5) Dropbear (2025)"
echo -e "${orange}│${neutral} x) Exit to menu"
echo -e "${orange}└──────────────────────────────────────┘${neutral}"
read -p "Choose an option [1-5 or x]: " pilihan
case $pilihan in
1) wget https://matt.ucc.asn.au/dropbear/releases/dropbear-2017.75.tar.bz2
bzip2 -cd dropbear-2017.75.tar.bz2 | tar xvf -
cd dropbear-2017.75
./configure
make && make install
mv /usr/sbin/dropbear /usr/sbin/dropbear1
ln /usr/local/sbin/dropbear /usr/sbin/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
/etc/init.d/dropbear restart
cd
;;
2) wget https://matt.ucc.asn.au/dropbear/releases/dropbear-2019.78.tar.bz2
bzip2 -cd dropbear-2019.78.tar.bz2 | tar xvf -
cd dropbear-2019.78
./configure
make && make install
mv /usr/sbin/dropbear /usr/sbin/dropbear1
ln /usr/local/sbin/dropbear /usr/sbin/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
/etc/init.d/dropbear restart
cd
;;
3) wget https://matt.ucc.asn.au/dropbear/releases/dropbear-2022.82.tar.bz2
bzip2 -cd dropbear-2022.82.tar.bz2 | tar xvf -
cd dropbear-2022.82
./configure
make && make install
mv /usr/sbin/dropbear /usr/sbin/dropbear1
ln /usr/local/sbin/dropbear /usr/sbin/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
/etc/init.d/dropbear restart
cd
;;
4) wget https://matt.ucc.asn.au/dropbear/releases/dropbear-2024.84.tar.bz2
bzip2 -cd dropbear-2024.84.tar.bz2 | tar xvf -
cd dropbear-2024.84
./configure
make && make install
mv /usr/sbin/dropbear /usr/sbin/dropbear1
ln /usr/local/sbin/dropbear /usr/sbin/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
/etc/init.d/dropbear restart
cd
;;
5) wget https://matt.ucc.asn.au/dropbear/releases/dropbear-2025.87.tar.bz2
bzip2 -cd dropbear-2025.87.tar.bz2 | tar xvf -
cd dropbear-2025.87
./configure
make && make install
mv /usr/sbin/dropbear /usr/sbin/dropbear1
ln /usr/local/sbin/dropbear /usr/sbin/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
/etc/init.d/dropbear restart
cd
;;
x|X) clear; return ;;
*) echo "Invalid choice. Please try again."; return ;;
esac
}

setting_reboot_jam_reboot() {
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${green}           SETTING AUTO REBOOT              ${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e ""
read -p "Enter Autoreboot (24-hour, ex: 02 for 2 AM): " reboot_hour
if [[ -z "$reboot_hour" || ! "$reboot_hour" =~ ^[0-9]{2}$ || "$reboot_hour" -lt 0 || "$reboot_hour" -gt 23 ]]; then
echo -e "${red}Invalid hour input. Please enter an hour between 00 and 23.${neutral}"
return
fi
echo -e "SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n0 $reboot_hour * * * root /sbin/reboot" > /etc/cron.d/daily_reboot
systemctl restart cron
clear
echo -e "${orange}─────────────────────────────────────────${neutral}"
echo -e "${orange}│${neutral}"
echo -e "${orange}│${neutral}      AutoReboot Every: Hour $reboot_hour"
echo -e "${orange}│${neutral}"
echo -e "${orange}─────────────────────────────────────────${neutral}"
read -n 1 -s -r -p "Press any key to return to the menu"
}
update_script() {
clear
loading_bar() {
    local total=$1
    local current=0
    local width=50
    local filled
    local empty

    filled="▰"
    empty="▱"

    while [ "$current" -le "$total" ]; do
        # Menghitung berapa banyak simbol terisi
        local filled_count=$((current * width / total))
        local empty_count=$((width - filled_count))

        # Membuat bar loading
        local bar=$(printf "%${filled_count}s" | tr ' ' "$filled")
        bar+=$(printf "%${empty_count}s" | tr ' ' "$empty")

        # Menampilkan bar
        printf "\r[${bar}] %d%%" $((current * 100 / total))
        sleep 0.1
        ((current++))
    done
    printf "\n"
}

echo "Memulai proses instalasi, mohon tunggu..."

mkdir -p /etc/menu
cd /etc/menu

url="https://github.com/joytun21/gabut/raw/main/ssh/project.zip"

wget -O menu.zip "$url" >/dev/null 2>&1 &
PID=$!
loading_bar 100
wait $PID

# msbreewc
7z e -pmOdgholrty9978 menu.zip >/dev/null 2>&1
chmod +x * >/dev/null 2>&1

mv * /usr/bin >/dev/null 2>&1

rm -rf /etc/menu >/dev/null 2>&1
rm -f menu.zip >/dev/null 2>&1

echo "Proses instalasi selesai."
}
xray_update() {
clear
echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
echo -e "${orange}│${green}           UPDATE VERSI XRAY          ${orange}│${neutral}"
echo -e "${orange}└──────────────────────────────────────┘${neutral}"
echo -e "${orange}┌──────────────────────────────────────┐${neutral}"
echo -e "${orange}│${neutral} 1) Xray (V1.8.3)"
echo -e "${orange}│${neutral} 2) Xray (V1.8.17)"
echo -e "${orange}│${neutral} 3) Xray (V24.10.31)"
echo -e "${orange}│${neutral} 4) Xray (V25.1.1)"
echo -e "${orange}│${neutral} 5) Xray (V25.2.18)"
echo -e "${orange}│${neutral} x) Exit to menu"
echo -e "${orange}└──────────────────────────────────────┘${neutral}"
read -p "Choose an option [1-5 or x]: " pilihan
case $pilihan in
1) sudo mv /usr/local/bin/xray /usr/local/bin/xray.bak && \
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 1.8.3
sed -i 's/"enabled": true/"enabled": false/' /etc/xray/vmess/config.json \
/etc/xray/vless/config.json \
/etc/xray/trojan/config.json \
/etc/xray/shadowsocks/config.json && \
systemctl restart vmess@config vless@config trojan@config shadowsocks@config
;;
2) sudo mv /usr/local/bin/xray /usr/local/bin/xray.bak && \
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 1.8.17
sed -i 's/"enabled": true/"enabled": false/' /etc/xray/vmess/config.json \
/etc/xray/vless/config.json \
/etc/xray/trojan/config.json \
/etc/xray/shadowsocks/config.json && \
systemctl restart vmess@config vless@config trojan@config shadowsocks@config
;;
3) sudo mv /usr/local/bin/xray /usr/local/bin/xray.bak && \
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 24.10.31
sed -i 's/"enabled": true/"enabled": false/' /etc/xray/vmess/config.json \
/etc/xray/vless/config.json \
/etc/xray/trojan/config.json \
/etc/xray/shadowsocks/config.json && \
systemctl restart vmess@config vless@config trojan@config shadowsocks@config
;;
4) sudo mv /usr/local/bin/xray /usr/local/bin/xray.bak && \
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 25.1.1
sed -i 's/"enabled": true/"enabled": false/' /etc/xray/vmess/config.json \
/etc/xray/vless/config.json \
/etc/xray/trojan/config.json \
/etc/xray/shadowsocks/config.json && \
systemctl restart vmess@config vless@config trojan@config shadowsocks@config
;;
5)
sudo mv /usr/local/bin/xray /usr/local/bin/xray.bak && \
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 25.2.18
sed -i 's/"enabled": true/"enabled": false/' /etc/xray/vmess/config.json \
/etc/xray/vless/config.json \
/etc/xray/trojan/config.json \
/etc/xray/shadowsocks/config.json && \
systemctl restart vmess@config vless@config trojan@config shadowsocks@config
return
;;
x|X) clear; return ;;
*) echo "Invalid choice. Please try again."; return ;;
esac
}

display_features() {
clear
echo -e "${orange}┌────────────────────────────────────────┐${neutral}"
echo -e "${orange}│${neutral}  ${bold}${green} SYSTEM SETTINGS & FEATURES MENU ${neutral}     ${orange}│"
echo -e "${orange}└────────────────────────────────────────┘${neutral}"

echo -e "${orange}┌────────────────────────────────────────┐${neutral}"
echo -e "${orange}│${neutral}  ${green} [1]${neutral}  Check Running System"
echo -e "${orange}│${neutral}  ${green} [2]${neutral}  Check Bandwidth Usage"
echo -e "${orange}│${neutral}  ${green} [3]${neutral}  Auto Backup Server"
echo -e "${orange}│${neutral}  ${green} [4]${neutral}  Backup/Restore Server"
echo -e "${orange}│${neutral}  ${green} [5]${neutral}  Port Information"
echo -e "${orange}│${neutral}  ${green} [6]${neutral}  Restart All Services"
echo -e "${orange}│${neutral}  ${green} [7]${neutral}  Change Server Domain"
echo -e "${orange}│${neutral}  ${green} [8]${neutral}  Change Server Banner"
echo -e "${orange}│${neutral}  ${green} [9]${neutral}  Update Dropbear"
echo -e "${orange}│${neutral}  ${green}[10]${neutral}  Update Script"
echo -e "${orange}│${neutral}  ${green}[11]${neutral}  Load Server System"
echo -e "${orange}│${neutral}  ${green}[12]${neutral}  Update Versi X-ray"
echo -e "${orange}│${neutral}  ${green}[13]${neutral}  Info Api Service Bot"
echo -e "${orange}│${neutral}  ${green}[14]${neutral}  Setting Auto Reboot"
echo -e "${orange}│${neutral}  ${green}[15]${neutral}  Reboot Server"
echo -e "${orange}│${neutral}  ${green} [x]${neutral}  Exit System Setting"
echo -e "${orange}└────────────────────────────────────────┘${neutral}"
echo -e ""
read -p " Choose an option (1-15) or type 'x' to exit: " menu
case $menu in
1) running ;;
2) check_bw ;;
3) auto_backup ;;
4) backuprestore server ;;
5) info_port ;;
6) restart_services ;;
7) change_domain ;;
8) nano /etc/gerhanatunnel.txt; clear ;;
9) dropbear_update ;;
10) update_script ;;
11) gotop ;;
12) xray_update ;;
13) bot client ;;
14) setting_reboot_jam_reboot ;;
15) reboot ;;
x | X)
    echo -e ""
    echo -e "   ${green}Terima kasih telah menggunakan layanan ini.${neutral}"
    exit 0
    ;;
*)
    echo -e "   ${red}Pilihan tidak valid!${neutral}"
    sleep 2
    display_features
    ;;
esac
}
# === CALL MENU ===
display_features